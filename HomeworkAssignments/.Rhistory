grad.rate.correlations<- grad.rate.correlations[-Grad.Rate,]
grad.rate.correlations
grad.rate.correlations
grad.rate.correlations<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations
grad.rate.correlations<- grad.rate.correlations.og[-18,]
grad.rate.correlations.og<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations<- grad.rate.correlations.og[-18,]
grad.rate.correlations
grad.rate.correlations<- grad.rate.correlations.og[-Grad.Rate,]
grad.rate.correlations
data.frame(grad.rate.correlations)
grad.rate.correlations<- grad.rate.correlations.og[-Grad.Rate,:]
grad.rate.correlations<- grad.rate.correlations.og[~.-Grad.Rate,]
grad.rate.correlations<- grad.rate.correlations.og[~.-18,]
grad.rate.correlations<- data.frame(grad.rate.correlations.og[-Grad.Rate,])
grad.rate.correlations#sorting in order to make it easier to find the max values (didn't know how to filter out )
grad.rate.correlations.og
grad.rate.correlations<- data.frame(grad.rate.correlations.og[-18,])
grad.rate.correlations
grad.rate.correlations.og<-data.frame(storage[-Grad.Rate,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations.og<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations.og2<-data.frame(storage[-Grad.Rate,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations.og2
attach(Collegecopy)
#I type-casted the "Yes" values in the Private column to 1s and the "No" values to 0
things<-ifelse(Collegecopy[,2]=="Yes",1,0)
#altered the College dataset, adding in the typecasted Private column
Collegecopy2<-Collegecopy
Collegecopy2$Private <- things
Collegecopy2
##filtered out the column containing the college names because obviously this variable cannot be correlated to the graduation rate
cordata <- Collegecopy2[,2:length(Collegecopy)]
#temporary vector that holds the correlation matrix for the entire dataset
storage<-round(cor(cordata),4)
#The correlation matrix pertaining to the Graduation Rate column
grad.rate.correlations.og<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations.og2<-data.frame(storage[-Grad.Rate,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations.og2
grad.rate.correlations.og<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations.og2<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations.og2
attach(Collegecopy)
#I type-casted the "Yes" values in the Private column to 1s and the "No" values to 0
things<-ifelse(Collegecopy[,2]=="Yes",1,0)
#altered the College dataset, adding in the typecasted Private column
Collegecopy2<-Collegecopy
Collegecopy2$Private <- things
Collegecopy2
##filtered out the column containing the college names because obviously this variable cannot be correlated to the graduation rate
cordata <- Collegecopy2[,2:length(Collegecopy)]
#temporary vector that holds the correlation matrix for the entire dataset
storage<-round(cor(cordata),4)
#The correlation matrix pertaining to the Graduation Rate column
grad.rate.correlations.og<-data.frame(storage[,"Grad.Rate"])
grad.rate.correlations.og2<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations.og
grad.rate.correlations.og2
grad.rate.correlations.og<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations.og
which(grad.rate.correlations.og == max(grad.rate.correlations.og))
grad.rate.correlations.og(which(grad.rate.correlations.og == max(grad.rate.correlations.og)))
grad.rate.correlations.og[which(grad.rate.correlations.og == max(grad.rate.correlations.og))]
grad.rate.correlations.og[which(grad.rate.correlations.og == max(grad.rate.correlations.og)),]
which(grad.rate.correlations.og == max(grad.rate.correlations.og))
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors())
grad.rate.correlations<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations
which(grad.rate.correlations == max(grad.rate.correlations))
grad.rate.correlations
grad.rate.correlations
grad.rate.correlations
grad.rate.correlations<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations
which(grad.rate.correlations == max(grad.rate.correlations))
grad.rate.correlations[9,]
grad.rate.correlations[9]
grad.rate.correlations[9,]
data.frame(grad.rate.correlations[9,])
grad.rate.correlations<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations
storage
grad.rate.correlations<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations
which(grad.rate.correlations == max(grad.rate.correlations))
which(grad.rate.correlations == max(abs(grad.rate.correlations)))
which(grad.rate.correlations == max(abs(grad.rate.correlations)))
grad.rate.correlations<-data.frame(storage[-18,"Grad.Rate"])
grad.rate.correlations
grad.rate.correlations[which(grad.rate.correlations == max(abs(grad.rate.correlations))),]
eight.values <- 1:8
choose <- function(n) {
mean(sample(eight.values, size = n, replace = TRUE))
}
plot(sapply(1:1000, choose), type = "l", xlab = "# of dice", ylab = "average")
set.seed(1648) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
lambda <- 0.2 # always use lambda = 0.2 for these sims
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
clt <- c(clt, mean(rexp(n, lambda)))
}
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Exponential Distribution (n=40)", col='beige')
sd(clt)
site1 <- c(93,120,65,105,115,82,99,87,100,90,78,95,93,88,110)
site2<- c(85,45,80,28,75,70,65,55,50,40)
site3<- c(100, 75, 65,40,73,65,50,30,45,50)
site4<-c(96,58,95,90,65,80,85,95,82)
siteData <- data.frame(
Y=c(site1, site2, site3, site4),
Site =factor(rep(c("site1", "site2", "site3", "site4"), times=c(length(site1), length(site2), length(site3), length(site4))))
)
test_set <- aov(Y~Site, data=siteData)
anova(test_set)
boxplot(site1,site2, site3, site4)
ggplot(c(site1,site2,site3,site4),aes(x=sites)) +
geom_boxplot()
boxplot(site1,site2, site3, site4)
ggplot(data.frame(site1,site2,site3,site4),aes(x=sites)) +
geom_boxplot()
geom_boxplot(c(site1,site2,site3,site4))
geom_boxplot(aes(c(site1,site2,site3,site4))
geom_boxplot(aes(c(site1,site2,site3,site4))
geom_boxplot(aes(c(site1,site2,site3,site4)))
ggplot() +
geom_boxplot(aes(c(site1,site2,site3,site4)))
ggplot(aes(c(site1,site2,site3,site4))) +
geom_boxplot(aes(c(site1,site2,site3,site4)))
boxplot(site1,site2, site3, site4)
set.seed(123)
A <- 1:1000
B <- rnorm(n=1000, mean = A, sd=0.4*A)
summary(lm(A~B))$coefficients  # this is your regression
#                Estimate Std. Error  t value      Pr(>|t|)
# (Intercept) 197.5978552 9.62892402 20.52128  2.361529e-78
# B             0.6012796 0.01535132 39.16794 5.465950e-204
summary(lm(B~A))$coefficients
#               Estimate  Std. Error     t value      Pr(>|t|)
# (Intercept) -0.5542773 14.86392934 -0.03729009  9.702612e-01
# A            1.0076260  0.02572579 39.16793538 5.465950e-204
windows()
set.seed(123)
A <- 1:1000
B <- rnorm(n=1000, mean = A, sd=0.4*A)
summary(lm(A~B))$coefficients  # this is your regression
#                Estimate Std. Error  t value      Pr(>|t|)
# (Intercept) 197.5978552 9.62892402 20.52128  2.361529e-78
# B             0.6012796 0.01535132 39.16794 5.465950e-204
summary(lm(B~A))$coefficients
#               Estimate  Std. Error     t value      Pr(>|t|)
# (Intercept) -0.5542773 14.86392934 -0.03729009  9.702612e-01
# A            1.0076260  0.02572579 39.16793538 5.465950e-204
plot(A,B)    # here I switched X & Y
abline(0,1, col="red")
abline(coef(lm(B~A)), col="blue")
set.seed(123)
x <- 1:1000
y <- rnorm(n=1000, mean = x, sd=0.4*x)
plot(x,y)
abline(0,1, col="red")
install.packages("olssr")
install.packages("olssr")
library(olssr)
var(x,y)
plot(lm(x,y))
plot(lm(x~y))
var(x,y)
set.seed(123)
x <- 1:1000
y <- rnorm(n=1000, mean = x, sd=0.4*x)
plot(x,y)
abline(0,1, col="red")
plot(lm(x~y))
window(2,2)
par(mfrow=c(2,2))
plot(lm(x~y))
set.seed(123)
x <- 1:1000
y <- rnorm(n=1000, mean = x, sd=0.4*x)
plot(x,y)
abline(0,1, col="red")
par(mfrow=c(2,2))
plot(lm(x~y))
setwd("~/Documents/BigData_Course/HomeworkAssignments")
setwd("~/Documents/BigData_Course/HomeworkAssignments")
library(tree)
install.packages("tree")
library(tree)
library(ISLR)
attach(Carseats)
Carseats
Carseats = data.frame(Carseats, High)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
Carseats
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
set.seed(2)
train = sample(1:nrow(Carseats),200)
Carseats.test = Carseats[-train,]
High.test= High[-train]
tree.carseats = tree(High~.-Sales, Carseats, subset = train)
tree.pred = predict(tree.carseats, Carseats.test, type = "class")
table(tree.pred,High.test)
(86+57)/(86+57+27+30)
print("Success rate of:"(86+57)/(86+57+27+30))
print("Success rate of: ",(86+57)/(86+57+27+30))
print("Success rate of: %d",(86+57)/(86+57+27+30))
print(paste0("Success rate of: %d",(86+57)/(86+57+27+30))
print(paste0("Success rate of: %d",(86+57)/(86+57+27+30)))
cat("Success rate of: %d",(86+57)/(86+57+27+30))
cat("Success rate of: ",(86+57)/(86+57+27+30)*100)
set.seed(3)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
set.seed(3)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
set.seed(3)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1,2))
plot(cv.carseats$size, cv.carseats$dev, type="b")
plot(cv.carseats$k, cv.carseats$dev, type="b")
set.seed(3)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1,2))
plot(cv.carseats$size, cv.carseats$dev, type="a")
set.seed(3)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1,2))
plot(cv.carseats$size, cv.carseats$dev, type="b")
plot(cv.carseats$k, cv.carseats$dev, type="b")
prune.carseats = prune.misclass(tree.carseats,best = 9)
plot(prune.carseats)
text(prune.carseats,pretty = 0)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
cat("Success rate of: ",(94+60)/(96+60+22+24)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
cat("Success rate of: ",(94+60)/(96+60+22+24))
prune.carseats = prune.misclass(tree.carseats,best = 11)
plot(prune.carseats)
text(prune.carseats,pretty = 0)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
prune.carseats = prune.misclass(tree.carseats,best = 11)
plot(prune.carseats)
text(prune.carseats,pretty = 0)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
cat("Success rate of: ",(91+63)/(200))
prune.carseats = prune.misclass(tree.carseats,best = 15)
plot(prune.carseats)
text(prune.carseats,pretty = 0)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
cat("Success rate of: ",(91+63)/(200))
prune.carseats = prune.misclass(tree.carseats,best = 15)
plot(prune.carseats)
text(prune.carseats,pretty = 0)
tree.pred=predict(prune.carseats,Carseats.test, type = "class")
table(tree.pred, High.test)
cat("Success rate of: ",(86+62)/(200))
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston),nrow(Boston)/2)
tree.boston = tree(medv~.,Boston, subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty = 0)
cv.boston = cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type = 'b')
cv.boston
cv.boston = cv.tree(tree.boston)
cv.boston
plot(cv.boston$size, cv.boston$dev, type = 'b')
cv.boston = cv.tree(tree.boston)
cv.boston
plot(cv.boston$size, cv.boston$dev, type = 'b')
prune.boston = prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty = 0)
prune.boston = prune.tree(tree.boston,best=7)
plot(prune.boston)
text(prune.boston,pretty = 0)
prune.boston = prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty = 0)
yhat = predict(tree.boston, newdata = Boston[-train,])
boston.test = Boston[-train, "medv"]
plot(yhat, boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
library(randomForest)
installed.packages("randomForest")
install.packages("randomForest")
library(randomForest)
.libPaths( c(.libPaths(), "/home/admin/user/data"))
library(randomForest)
.libPaths( c(.libPaths(), "/home/admin/user/randomForest"))
library(randomForest)
library(gbm)
install.packages("gbm")
library(gbm)
set.seed(1)
boost.boston = gbm(medv~.,
data = Boston[train,],
distribution = "gaussian",
n.trees = 5000,
interaction.depth = 4)
#install.packages("gbm")
library(gbm)
set.seed(1)
boost.boston = gbm(medv~.,
data = Boston[train,],
distribution = "gaussian",
n.trees = 5000,
interaction.depth = 4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston, i = "rm")
plot(boost.boston, i = "lstat")
yhat.boost = predict(boost.boston,newdata=Boston[-train,],
n.trees=5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.2,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.5,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.25,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.1,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.001,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.002,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.005,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.06,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.005,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.004,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,
data=Boston[train,],
distribution = "gaussian",
n.trees=5000,
interaction.depth= 4,
shrinkage = 0.005,
verbose = F)
yhat.boost=predict(boost.boston,
newdata = Boston[-train,],
n.trees = 5000)
mean((yhat.boost-boston.test)^2)
install.packages("randomForest")
install.package("randomForest")
install.packages("randomForest")
install.packages('randomForest')
library(randomForest)
install.packages('randomForest')
library(randomForest)
install.packages('randomForest').libPaths( c(.libPaths(), "/home/admin/user/data"))
library(randomForest).libPaths( c(.libPaths(), "/home/admin/user/data"))
randomForest.libPaths()
.libPaths()
install.packages('randomForest').libPaths()
.libPaths("RCurl")
.libPaths("RCurl")
.libPaths( c(.libPaths(), "/home/admin/user/data"))
install.packages('randomForest')
library(randomForest)
.libPaths( c(.libPaths(), "/home/admin/user/data"))
install.packages('randomForest')
library(randomForest)
install.packages(.libPaths( c(.libPaths(), "/home/admin/user/data","randomForest")))
y
install.packages("randomForest")
install.packages('.libPaths( c(.libPaths(), "/home/admin/user/data/randomForest"))')
install.packages('randomFores')
install.packages('randomForest')
install.packages('randomForest')
install.packages("randomForest)
install.packages('randomForest')
quit()
#install.packages("tree")
install.packages('randomForest')
library(randomForest)
install.packages("/Downloads/randomForest")
install.packages("./Downloads/randomForest")
install.packages("randomForest")
install.packages(.libPaths( c(.libPaths(), "/Downloads/randomForest")))
.libPaths()
install.packages(.libPaths("~/Users/Srid/Downloads/randomForest"))
install.packages(.libPaths("~/Users/Srid/Downloads/randomForest"))
install.packages("~/Users/Srid/Downloads/randomForest")
install.packages("/Users/Srid/Downloads/randomForest")
